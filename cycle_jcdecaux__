#!/bin/bash
# -*- sh -*-
# -------------------------------------------------------
#  Munin node script
#
#  Monitor cycle station status
#
#  Plugin name cycle_jcdecaux_contractname_displayname
#
#  displayname should be declared as a server in /etc/munin/munin.conf
#
#  Needs curl and jq
#
#  Parameters : 
#    $1 : none, "autoconf" or "config"
#
#  06/09/2015, V1.0 - Creation by N. Bernaerts
# -------------------------------------------------------

: << =cut

=head1 NAME

cycle_jcdecaux__ - Munin plugin to monitor the cycle station status in JCDecaux network

=head1 APPLICABLE SYSTEMS

Any Linux computer connected to internet

=head1 CONFIGURATION

No configuration needed

=head1 INTERPRETATION

Number of cycles and cycle stands available in a JCDecaux network station

=head1 MIB INFORMATION

No specific information

=head1 MAGIC MARKERS

#%# family=auto
#%# capabilities=autoconf

=head1 VERSION

$Id$

=head1 BUGS

None known.

=head1 AUTHOR

Copyright (C) 2015 Nicolas Bernaerts

=head1 LICENSE

GPLv2.

=cut

# -------------------------------------------------------
#  Parameters
# -------------------------------------------------------

# API server URL
URL_BASE="https://api.jcdecaux.com/vls/v1/stations"

# personnal key (to get from developer.jcdecaux.com)
API_KEY="99e229022a329f3c13320d3f06096aaa7bacf257"

# list of station to display
ARR_STATION=(37 38 47 56)

# contract name
CONTRACT_NAME=$(basename $0 | cut -d'_' -f3)
DISPLAY_NAME=$(basename $0 | cut -d'_' -f4)

# -------------------------------------------------------
#  Read station data
# -------------------------------------------------------

# generate URL
URL_FULL="${URL_BASE}?contract=${CONTRACT_NAME}&apiKey=${API_KEY}"

# query server
RESULT=$(curl --silent --compressed -A "Mozilla/5.0" "${URL_FULL}")

# -------------------------------------------------------
#  Handle autoconf call
# -------------------------------------------------------

if [ "$1" = "autoconf" ]; then
  echo "yes"

# -------------------------------------------------------
#  Handle configuration call
# -------------------------------------------------------

elif [ "$1" = "config" ]; then

  # loop thru station indexes
  COUNTER=0
  until [ "${COUNTER}" = "-1" ]; do
    
    # get station number
    STATION_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].number" 2>/dev/null)

    # if station number is valid
    if [ "${STATION_NBR}" -eq "${STATION_NBR}" ] 2>/dev/null; then

      # loop thru requested stations
      for INDEX in "${ARR_STATION[@]}"
      do
        # if current station is a requested one
        if [ "$INDEX" -eq "${STATION_NBR}" ] ; then
          # get station data
          TOTAL_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].bike_stands")
          STATION_NAME=$(echo ${RESULT} | jq ".[${COUNTER}].name")
          STATION_NAME=$(echo ${STATION_NAME:1:-1} | cut -d'-' -f2- | tr "'" " " | xargs)

          # display graph characteristics
          echo "multigraph station${STATION_NBR}"
          echo "graph_title ${DISPLAY_NAME} - (${STATION_NBR}) ${STATION_NAME}"
          echo "graph_vlabel Units"
          echo "graph_args --lower-limit 0 --upper-limit ${TOTAL_NBR} --rigid"
          echo "graph_category cycle"
          echo "graph_info Monitor available cycles and cycle stands"

          # display configuration
          echo "cycle.label Cycles"
          echo "cycle.info Number of cycles available"
          echo "cycle.draw AREA"
          echo "cycle.colour 00ff00"
          echo "stand.label Cycle stands"
          echo "stand.info Number of cycle stands available"
          echo "stand.draw STACK"
          echo "stand.colour 0000ff"
          echo "brokn.label Broken"
          echo "brokn.info Number of broken cycles or stands"
          echo "brokn.draw STACK"
          echo "brokn.colour ff0000"
        fi
      done

      # increment station index
      COUNTER=$(( COUNTER + 1))

     # else, loop is over
    else
      COUNTER="-1"
    fi

  done

# -------------------------------------------------------
#  Handle normal call to read values
# -------------------------------------------------------

else 

  # loop thru station indexes
  COUNTER=0
  until [ "${COUNTER}" = "-1" ]; do
    
    # get station number
    STATION_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].number" 2>/dev/null)

    # if station number is valid
    if [ "${STATION_NBR}" -eq "${STATION_NBR}" ] 2>/dev/null; then

      # loop thru requested stations
      for INDEX in "${ARR_STATION[@]}"
      do
        # if current station is a requested one
        if [ "$INDEX" -eq "${STATION_NBR}" ] ; then
          # get cycle and cycle stands available
          TOTAL_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].bike_stands")
          CYCLE_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].available_bikes")
          STAND_NBR=$(echo ${RESULT} | jq ".[${COUNTER}].available_bike_stands")
          BROKN_NBR=$(( TOTAL_NBR - CYCLE_NBR - STAND_NBR ))

          # display graph values
          echo "multigraph station${STATION_NBR}"
          echo "cycle.value ${CYCLE_NBR}"
          echo "stand.value ${STAND_NBR}"
          echo "brokn.value ${BROKN_NBR}"
        fi
      done

      # increment station index
      COUNTER=$(( COUNTER + 1))

     # else, loop is over
    else
      COUNTER="-1"
    fi

  done

fi

# end
exit 0
