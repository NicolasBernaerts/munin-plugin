#!/bin/bash
# -*- sh -*-
# -------------------------------------------------------
# Munin node script
#
# Monitor UPS state when connected to a ReadyNAS
#
# Used in http://bernaerts.dyndns.org/nas/...
#
# Script name format should be :
#   snmp_HostName_ups
#   snmp_HostName_PortNumber_ups
#
# Parameters :
#   $1 : none, "snmpconf" or "config"
#
# 14/05/2016, V1.0 - Creation by N. Bernaerts
# -------------------------------------------------------

: << =cut

=head1 NAME

snmp__ups - Munin plugin to monitor UPS state when USB connected to any SNMP extended device.

=head1 APPLICABLE SYSTEMS

Any ReadyNAS with SNMP enabled and extended to handle UPS data.
Informations are available from http://bernaerts.dyndns.org/nas/...
Tested on ReadyNAS 102.

=head1 CONFIGURATION

ReadyNAS must have SNMP enabled and extended to handle UPS data.
This plugin uses public community.

=head1 INTERPRETATION

Battery level is in % (0-100).
Input power is in % of maximum power (0-100).
Runtime is in mn.

=head1 MIB INFORMATION

This plugin uses extension MIB (NET-SNMP-EXTEND-MIB).

=head1 MAGIC MARKERS

  #%# family=snmpauto
  #%# capabilities=snmpconf

=head1 VERSION

  $Id$

=head1 BUGS

None known.

=head1 AUTHOR

Copyright (C) 2016 Nicolas Bernaerts

=head1 LICENSE

GPLv2.

=cut

# -------------------------------------------------------
# Configure all MIBs adresses
# -------------------------------------------------------

MIB_MANUFACTURER="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"ups.mfr\""
MIB_MODEL="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"ups.model\""
MIB_STATUS="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"ups.status\""
MIB_POWER_NOMINAL="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"ups.realpower.nominal\""
MIB_POWER_LOAD="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"ups.load\""
MIB_BATTERY_TYPE="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"battery.type\""
MIB_BATTERY_CHARGE="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"battery.charge\""
MIB_BATTERY_RUNTIME="NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"battery.runtime\""

# -------------------------------------------------------
# Get NAS address and port
# -------------------------------------------------------

# get NAS hostname and port from script name
NAS_HOST=$(basename $0 | cut -d'_' -f2)
NAS_PORT=$(( $(basename $0 | cut -d'_' -f3) ))

# set IP according to hostname and port
[ "${NAS_PORT}" = "0" ] && NAS_IP="${NAS_HOST}" || NAS_IP="${NAS_HOST}:${NAS_PORT}"

# -------------------------------------------------------
#   Handle SNMP snmpconf call
#   Announce required MIBs
# -------------------------------------------------------
if [ "$1" = "snmpconf" ];
then

  echo "require ${MIB_MANUFACTURER}"
  echo "require ${MIB_MODEL}"
  echo "require ${MIB_STATUS}"
  echo "require ${MIB_POWER_NOMINAL}"
  echo "require ${MIB_POWER_LOAD}"
  echo "require ${MIB_BATTERY_TYPE}"
  echo "require ${MIB_BATTERY_CHARGE}"
  echo "require ${MIB_BATTERY_RUNTIME}"

# -------------------------------------------------------
#   Handle SNMP config call
#   Publish plugin configuration
# -------------------------------------------------------
elif [ "$1" = "config" ];
then

  # read SNMP MIB
  MIB_RESULT=$(snmpget -v1 -c public ${NAS_IP} ${MIB_MANUFACTURER} ${MIB_MODEL} ${MIB_STATUS} ${MIB_POWER_NOMINAL} ${MIB_BATTERY_TYPE})

  # get values from result
  UPS_MANUFACTURER=$(echo ${MIB_RESULT} | sed "s/^.*ups.mfr[^']*'\([^']*\).*$/\1/g")
  UPS_MODEL=$(echo ${MIB_RESULT} | sed "s/^.*ups.model[^']*'\([^']*\).*$/\1/g")
  UPS_STATUS=$(echo ${MIB_RESULT} | sed "s/^.*ups.status[^']*'\([^']*\).*$/\1/g")
  UPS_POWER=$(echo ${MIB_RESULT} | sed "s/^.*ups.realpower.nominal[^']*'\([^']*\).*$/\1/g")
  UPS_BATTERY=$(echo ${MIB_RESULT} | sed "s/^.*battery.type[^']*'\([^']*\).*$/\1/g")

  # get UPS connection hostname
  echo "host_name $NAS_HOST"

  # graph  description
  echo "graph_title UPS ${UPS_MANUFACTURER} model ${UPS_MODEL}"
  echo "graph_category power"
  echo "graph_info This graph shows UPS battery charge and load"
  echo "graph_args --upper-limit 100 -l 0 --rigid"

  # battery capacity
  echo "capacity.info Battery ${UPS_BATTERY} of ${UPS_POWER} VA"
  echo "capacity.label Battery level (%)"
  echo "capacity.draw LINE2"
  [ "${UPS_STATUS}" = "OL" ] && echo "capacity.colour 008000" || echo "capacity.colour FFA500"
  echo "capacity.min 0"
  echo "capacity.max 100"

  # input power
  echo "power.info Input power"
  echo "power.label Input power (%)"
  echo "power.draw LINE1"
  echo "power.colour 0000FF"
  echo "power.min 0"

  # battery runtime
  echo "runtime.info UPS runtime if power failure"
  echo "runtime.label Runtime (mn)"
  echo "runtime.draw LINE1"
  echo "runtime.colour FF0000"
  echo "runtime.min 0"

# -------------------------------------------------------
#   Handle SNMP normal call
#   Provide UPS data
# -------------------------------------------------------
else

  # read SNMP MIB
  MIB_RESULT=$(snmpget -v1 -c public ${NAS_IP} ${MIB_BATTERY_CHARGE} ${MIB_BATTERY_RUNTIME} ${MIB_POWER_LOAD})

  # get values from result
  UPS_LOAD=$(echo ${MIB_RESULT} | sed "s/^.*ups.load[^']*'\([^']*\).*$/\1/g")
  UPS_CHARGE=$(echo ${MIB_RESULT} | sed "s/^.*battery.charge[^']*'\([^']*\).*$/\1/g")
  UPS_RUNTIME=$(echo ${MIB_RESULT} | sed "s/^.*battery.runtime[^']*'\([^']*\).*$/\1/g")

  # publish battery level and runtime
  echo "capacity.value ${UPS_CHARGE}"
  echo "power.value ${UPS_LOAD}"
  echo "runtime.value ${UPS_RUNTIME}"

fi

# exit
exit 0
